{"/Users/angelique/UniversityProjects/StudentProgressMonitor/backend/src/tests/domain/privacy.spec.ts":{"path":"/Users/angelique/UniversityProjects/StudentProgressMonitor/backend/src/tests/domain/privacy.spec.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":22},"end":{"line":6,"column":61}},"4":{"start":{"line":7,"column":18},"end":{"line":7,"column":49}},"5":{"start":{"line":8,"column":0},"end":{"line":56,"column":3}},"6":{"start":{"line":9,"column":4},"end":{"line":19,"column":7}},"7":{"start":{"line":10,"column":8},"end":{"line":12,"column":11}},"8":{"start":{"line":11,"column":12},"end":{"line":11,"column":95}},"9":{"start":{"line":13,"column":8},"end":{"line":15,"column":11}},"10":{"start":{"line":14,"column":12},"end":{"line":14,"column":100}},"11":{"start":{"line":16,"column":8},"end":{"line":18,"column":11}},"12":{"start":{"line":17,"column":12},"end":{"line":17,"column":148}},"13":{"start":{"line":20,"column":4},"end":{"line":39,"column":7}},"14":{"start":{"line":21,"column":8},"end":{"line":23,"column":11}},"15":{"start":{"line":22,"column":12},"end":{"line":22,"column":84}},"16":{"start":{"line":24,"column":8},"end":{"line":26,"column":11}},"17":{"start":{"line":25,"column":12},"end":{"line":25,"column":102}},"18":{"start":{"line":27,"column":8},"end":{"line":30,"column":11}},"19":{"start":{"line":28,"column":12},"end":{"line":28,"column":124}},"20":{"start":{"line":29,"column":12},"end":{"line":29,"column":146}},"21":{"start":{"line":31,"column":8},"end":{"line":34,"column":11}},"22":{"start":{"line":32,"column":12},"end":{"line":32,"column":130}},"23":{"start":{"line":33,"column":12},"end":{"line":33,"column":136}},"24":{"start":{"line":35,"column":8},"end":{"line":38,"column":11}},"25":{"start":{"line":36,"column":12},"end":{"line":36,"column":122}},"26":{"start":{"line":37,"column":12},"end":{"line":37,"column":142}},"27":{"start":{"line":40,"column":4},"end":{"line":55,"column":7}},"28":{"start":{"line":41,"column":8},"end":{"line":43,"column":11}},"29":{"start":{"line":42,"column":12},"end":{"line":42,"column":91}},"30":{"start":{"line":44,"column":8},"end":{"line":54,"column":11}},"31":{"start":{"line":45,"column":12},"end":{"line":48,"column":15}},"32":{"start":{"line":49,"column":12},"end":{"line":53,"column":15}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":49},"end":{"line":8,"column":50}},"loc":{"start":{"line":8,"column":55},"end":{"line":56,"column":1}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":26},"end":{"line":9,"column":27}},"loc":{"start":{"line":9,"column":32},"end":{"line":19,"column":5}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":10,"column":91},"end":{"line":10,"column":92}},"loc":{"start":{"line":10,"column":97},"end":{"line":12,"column":9}},"line":10},"4":{"name":"(anonymous_4)","decl":{"start":{"line":13,"column":96},"end":{"line":13,"column":97}},"loc":{"start":{"line":13,"column":102},"end":{"line":15,"column":9}},"line":13},"5":{"name":"(anonymous_5)","decl":{"start":{"line":16,"column":91},"end":{"line":16,"column":92}},"loc":{"start":{"line":16,"column":97},"end":{"line":18,"column":9}},"line":16},"6":{"name":"(anonymous_6)","decl":{"start":{"line":20,"column":26},"end":{"line":20,"column":27}},"loc":{"start":{"line":20,"column":32},"end":{"line":39,"column":5}},"line":20},"7":{"name":"(anonymous_7)","decl":{"start":{"line":21,"column":70},"end":{"line":21,"column":71}},"loc":{"start":{"line":21,"column":76},"end":{"line":23,"column":9}},"line":21},"8":{"name":"(anonymous_8)","decl":{"start":{"line":24,"column":72},"end":{"line":24,"column":73}},"loc":{"start":{"line":24,"column":78},"end":{"line":26,"column":9}},"line":24},"9":{"name":"(anonymous_9)","decl":{"start":{"line":27,"column":81},"end":{"line":27,"column":82}},"loc":{"start":{"line":27,"column":87},"end":{"line":30,"column":9}},"line":27},"10":{"name":"(anonymous_10)","decl":{"start":{"line":31,"column":67},"end":{"line":31,"column":68}},"loc":{"start":{"line":31,"column":73},"end":{"line":34,"column":9}},"line":31},"11":{"name":"(anonymous_11)","decl":{"start":{"line":35,"column":46},"end":{"line":35,"column":47}},"loc":{"start":{"line":35,"column":52},"end":{"line":38,"column":9}},"line":35},"12":{"name":"(anonymous_12)","decl":{"start":{"line":40,"column":26},"end":{"line":40,"column":27}},"loc":{"start":{"line":40,"column":32},"end":{"line":55,"column":5}},"line":40},"13":{"name":"(anonymous_13)","decl":{"start":{"line":41,"column":65},"end":{"line":41,"column":66}},"loc":{"start":{"line":41,"column":71},"end":{"line":43,"column":9}},"line":41},"14":{"name":"(anonymous_14)","decl":{"start":{"line":44,"column":49},"end":{"line":44,"column":50}},"loc":{"start":{"line":44,"column":55},"end":{"line":54,"column":9}},"line":44}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/angelique/UniversityProjects/StudentProgressMonitor/backend/src/tests/domain/privacy.spec.ts","sources":["/Users/angelique/UniversityProjects/StudentProgressMonitor/backend/src/tests/domain/privacy.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'node:assert';\nimport { anonymise, bucketise, normalise } from '../../domain/privacy';\n\ndescribe('Privacy Enhancing Technologies Tests', () => {\n\n    describe('bucketise', () => {\n\n        it('should return undefined if the number of scores is less than the bucket size', () => {\n            assert.deepStrictEqual(bucketise([1, 2]), undefined);\n        });\n\n        it('should return a single bucket if the number of scores is equal to the bucket size', () => {\n            assert.deepStrictEqual(bucketise([1, 2, 3]), [[1, 2, 3]]);\n        });\n\n        it('should return buckets of the size k, adding the remainder to the last bucket', () => {\n            assert.deepStrictEqual(bucketise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]);\n        });\n    });\n\n    describe('normalise', () => {\n\n        it('should return an empty array if no buckets are provided', () => {\n            assert.deepStrictEqual(normalise([]), []);\n        });\n\n        it('should leave a bucket as-is when there is only one bucket', () => {\n            assert.deepStrictEqual(normalise([[1, 2, 3]]), [[1, 2, 3]]);\n        });\n\n        it('should leave the buckets as-is when there are no overlapping items', () => {\n            assert.deepStrictEqual(normalise([[1, 2, 3], [4, 5, 6]]), [[1, 2, 3], [4, 5, 6]]);\n            assert.deepStrictEqual(normalise([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n        });\n\n        it(\"should shift items up a bucket if there's an overlap\", () => {\n            assert.deepStrictEqual(normalise([[1, 2, 2, 3], [3, 4, 5]]), [[1, 2, 2], [3, 3, 4, 5]]);\n            assert.deepStrictEqual(normalise([[1, 2, 2, 3, 3], [3, 4, 5]]), [[1, 2, 2], [3, 3, 3, 4, 5]]);\n        });\n\n        it('should remove redundant buckets', () => {\n            assert.deepStrictEqual(normalise([[2, 2, 2], [2, 3, 4]]), [[2, 2, 2, 2, 3, 4]]);\n            assert.deepStrictEqual(normalise([[1, 2, 2], [2, 2, 2], [2, 3, 4]]), [[1, 2, 2, 2, 2, 2, 2, 3, 4]]);\n        });\n\n    });\n\n    describe('anonymise', () => {\n\n        it('should return undefined if no buckets are provided', () => {\n            assert.deepStrictEqual(anonymise([]), undefined);\n        });\n\n\n        it('should anonymise buckets correctly', () => {\n            assert.deepStrictEqual(anonymise([[1, 2, 3], [4, 5, 6]]), [\n                { minScore: 1, maxScore: 3, proportion: 0.5 },\n                { minScore: 4, maxScore: 6, proportion: 0.5 }\n            ]);\n            assert.deepStrictEqual(anonymise([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]), [\n                { minScore: 1, maxScore: 3, proportion: 0.3 },\n                { minScore: 4, maxScore: 6, proportion: 0.3 },\n                { minScore: 7, maxScore: 10, proportion: 0.4 }\n            ]);\n        });\n    });\n\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"22237ecf2f9f70273720bc954f1db568d62f2f0b","contentHash":"cbd69a01a54706d707f949ed36141551f5edd6e21209714898afa6bf8362f0b2"},"/Users/angelique/UniversityProjects/StudentProgressMonitor/backend/src/domain/privacy/index.ts":{"path":"/Users/angelique/UniversityProjects/StudentProgressMonitor/backend/src/domain/privacy/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":95}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":15}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":58}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":46}},"5":{"start":{"line":17,"column":14},"end":{"line":17,"column":49}},"6":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"7":{"start":{"line":19,"column":8},"end":{"line":19,"column":25}},"8":{"start":{"line":21,"column":14},"end":{"line":21,"column":46}},"9":{"start":{"line":22,"column":22},"end":{"line":22,"column":42}},"10":{"start":{"line":24,"column":19},"end":{"line":24,"column":50}},"11":{"start":{"line":24,"column":44},"end":{"line":24,"column":49}},"12":{"start":{"line":25,"column":20},"end":{"line":25,"column":22}},"13":{"start":{"line":27,"column":4},"end":{"line":37,"column":5}},"14":{"start":{"line":27,"column":17},"end":{"line":27,"column":18}},"15":{"start":{"line":29,"column":21},"end":{"line":29,"column":23}},"16":{"start":{"line":31,"column":8},"end":{"line":34,"column":9}},"17":{"start":{"line":31,"column":25},"end":{"line":31,"column":26}},"18":{"start":{"line":33,"column":12},"end":{"line":33,"column":47}},"19":{"start":{"line":36,"column":8},"end":{"line":36,"column":29}},"20":{"start":{"line":38,"column":4},"end":{"line":42,"column":5}},"21":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"22":{"start":{"line":39,"column":25},"end":{"line":39,"column":26}},"23":{"start":{"line":40,"column":12},"end":{"line":40,"column":55}},"24":{"start":{"line":43,"column":4},"end":{"line":43,"column":19}},"25":{"start":{"line":45,"column":0},"end":{"line":45,"column":30}},"26":{"start":{"line":54,"column":4},"end":{"line":55,"column":25}},"27":{"start":{"line":55,"column":8},"end":{"line":55,"column":25}},"28":{"start":{"line":56,"column":30},"end":{"line":56,"column":32}},"29":{"start":{"line":57,"column":4},"end":{"line":91,"column":5}},"30":{"start":{"line":57,"column":17},"end":{"line":57,"column":18}},"31":{"start":{"line":58,"column":23},"end":{"line":58,"column":33}},"32":{"start":{"line":59,"column":27},"end":{"line":59,"column":41}},"33":{"start":{"line":62,"column":38},"end":{"line":62,"column":63}},"34":{"start":{"line":63,"column":36},"end":{"line":63,"column":49}},"35":{"start":{"line":64,"column":8},"end":{"line":90,"column":9}},"36":{"start":{"line":67,"column":35},"end":{"line":67,"column":37}},"37":{"start":{"line":71,"column":12},"end":{"line":78,"column":13}},"38":{"start":{"line":72,"column":16},"end":{"line":77,"column":17}},"39":{"start":{"line":73,"column":20},"end":{"line":73,"column":49}},"40":{"start":{"line":76,"column":20},"end":{"line":76,"column":46}},"41":{"start":{"line":79,"column":12},"end":{"line":84,"column":13}},"42":{"start":{"line":80,"column":16},"end":{"line":80,"column":57}},"43":{"start":{"line":83,"column":16},"end":{"line":83,"column":56}},"44":{"start":{"line":89,"column":12},"end":{"line":89,"column":43}},"45":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"46":{"start":{"line":93,"column":8},"end":{"line":93,"column":60}},"47":{"start":{"line":95,"column":4},"end":{"line":95,"column":29}},"48":{"start":{"line":97,"column":0},"end":{"line":97,"column":30}},"49":{"start":{"line":106,"column":4},"end":{"line":107,"column":25}},"50":{"start":{"line":107,"column":8},"end":{"line":107,"column":25}},"51":{"start":{"line":108,"column":23},"end":{"line":116,"column":7}},"52":{"start":{"line":110,"column":28},"end":{"line":110,"column":45}},"53":{"start":{"line":112,"column":26},"end":{"line":116,"column":5}},"54":{"start":{"line":118,"column":4},"end":{"line":118,"column":58}},"55":{"start":{"line":120,"column":0},"end":{"line":120,"column":30}}},"fnMap":{"0":{"name":"computeBucketSize","decl":{"start":{"line":5,"column":9},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":30},"end":{"line":7,"column":1}},"line":5},"1":{"name":"bucketise","decl":{"start":{"line":16,"column":9},"end":{"line":16,"column":18}},"loc":{"start":{"line":16,"column":30},"end":{"line":44,"column":1}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":34},"end":{"line":24,"column":35}},"loc":{"start":{"line":24,"column":44},"end":{"line":24,"column":49}},"line":24},"3":{"name":"normalise","decl":{"start":{"line":52,"column":9},"end":{"line":52,"column":18}},"loc":{"start":{"line":52,"column":28},"end":{"line":96,"column":1}},"line":52},"4":{"name":"anonymise","decl":{"start":{"line":104,"column":9},"end":{"line":104,"column":18}},"loc":{"start":{"line":104,"column":28},"end":{"line":119,"column":1}},"line":104},"5":{"name":"(anonymous_5)","decl":{"start":{"line":110,"column":16},"end":{"line":110,"column":17}},"loc":{"start":{"line":110,"column":28},"end":{"line":110,"column":45}},"line":110},"6":{"name":"(anonymous_6)","decl":{"start":{"line":112,"column":13},"end":{"line":112,"column":14}},"loc":{"start":{"line":112,"column":26},"end":{"line":116,"column":5}},"line":112}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},{"start":{"line":18,"column":4},"end":{"line":20,"column":5}}],"line":18},"1":{"loc":{"start":{"line":38,"column":4},"end":{"line":42,"column":5}},"type":"if","locations":[{"start":{"line":38,"column":4},"end":{"line":42,"column":5}},{"start":{"line":38,"column":4},"end":{"line":42,"column":5}}],"line":38},"2":{"loc":{"start":{"line":54,"column":4},"end":{"line":55,"column":25}},"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":55,"column":25}},{"start":{"line":54,"column":4},"end":{"line":55,"column":25}}],"line":54},"3":{"loc":{"start":{"line":64,"column":8},"end":{"line":90,"column":9}},"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":90,"column":9}},{"start":{"line":64,"column":8},"end":{"line":90,"column":9}}],"line":64},"4":{"loc":{"start":{"line":72,"column":16},"end":{"line":77,"column":17}},"type":"if","locations":[{"start":{"line":72,"column":16},"end":{"line":77,"column":17}},{"start":{"line":72,"column":16},"end":{"line":77,"column":17}}],"line":72},"5":{"loc":{"start":{"line":79,"column":12},"end":{"line":84,"column":13}},"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":84,"column":13}},{"start":{"line":79,"column":12},"end":{"line":84,"column":13}}],"line":79},"6":{"loc":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},{"start":{"line":92,"column":4},"end":{"line":94,"column":5}}],"line":92},"7":{"loc":{"start":{"line":106,"column":4},"end":{"line":107,"column":25}},"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":107,"column":25}},{"start":{"line":106,"column":4},"end":{"line":107,"column":25}}],"line":106},"8":{"loc":{"start":{"line":118,"column":11},"end":{"line":118,"column":57}},"type":"cond-expr","locations":[{"start":{"line":118,"column":35},"end":{"line":118,"column":45}},{"start":{"line":118,"column":48},"end":{"line":118,"column":57}}],"line":118}},"s":{"0":1,"1":1,"2":1,"3":3,"4":1,"5":3,"6":3,"7":1,"8":2,"9":2,"10":2,"11":11,"12":2,"13":2,"14":2,"15":4,"16":4,"17":4,"18":12,"19":4,"20":2,"21":1,"22":1,"23":1,"24":2,"25":1,"26":8,"27":0,"28":8,"29":8,"30":8,"31":8,"32":8,"33":8,"34":8,"35":8,"36":5,"37":5,"38":21,"39":8,"40":13,"41":5,"42":2,"43":3,"44":3,"45":8,"46":7,"47":8,"48":1,"49":3,"50":0,"51":3,"52":5,"53":5,"54":3,"55":1},"f":{"0":3,"1":3,"2":11,"3":8,"4":3,"5":5,"6":5},"b":{"0":[1,2],"1":[1,1],"2":[0,8],"3":[5,3],"4":[8,13],"5":[2,3],"6":[7,1],"7":[0,3],"8":[2,1]},"inputSourceMap":{"version":3,"file":"/Users/angelique/UniversityProjects/StudentProgressMonitor/backend/src/domain/privacy/index.ts","sources":["/Users/angelique/UniversityProjects/StudentProgressMonitor/backend/src/domain/privacy/index.ts"],"names":[],"mappings":"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","sourcesContent":["const MIN_K = 3;\n\nexport function computeBucketSize(n: number) {\n    return Math.ceil(Math.max(MIN_K/n, MIN_K/20) * n);\n}\n\n/**\n * Bucketise sorts the list of rawScores into buckets sized by {@link #computeBucketSize}.\n * If the length of the list of scores is less than the number of items per bucket, undefined is returned.\n *\n * @param rawScores is the unsorted list of scores.\n * @returns a list of sorted buckets, each of size k.\n */\nexport function bucketise(rawScores: number[]): number[][] | undefined {\n    const k = computeBucketSize(rawScores.length);\n    if (rawScores.length < k) {\n        return undefined;\n    }\n\n    const n = Math.floor(rawScores.length / k);\n\n    const remainder = rawScores.length % k;\n\n    // sort scores from lowest to highest\n    const scores = rawScores.sort((a, b) => a - b);\n\n    const buckets: number[][] = [];\n\n\n    // make n buckets\n    for(let i = 0; i < n; i++) {\n        // make bucket\n        let bucket: number[] = [];\n\n        // fill bucket\n        for (let index = 0; index < k; index++){\n            // k * i is the offset to move along the list of scores\n            bucket.push(scores[index + k*i]);\n\n        }\n\n        // add to list of buckets\n        buckets.push(bucket);\n    }\n\n    if (remainder > 0) {\n        for (let index = 0; index < remainder; index++){\n            buckets[n -1].push(scores[index + k * n]);\n        }\n    }\n\n    return buckets;\n}\n\n/**\n * Normalise reorganises the sorted buckets created with Bucketise to ensure that there are no overlap of scores\n * between buckets.\n *\n * @param buckets is the buckets created by Bucketise.\n */\nexport function normalise(buckets: number[][] | undefined) {\n    // if the buckets are undefined, undefined is returned\n    if (buckets === undefined) return undefined;\n\n    const normalisedBuckets: number[][] = [];\n\n    for (let i = 0; i < buckets.length - 1; i++) {\n        const bucket = buckets[i];\n        const nextBucket = buckets[i + 1];\n\n        // compare current bucket to next bucket\n        // to see if the last item in the bucket matches the first item in the next bucket.\n        const lastItemCurrentBucket = bucket[bucket.length - 1];\n        const firstItemNextBucket = nextBucket[0];\n\n        if (lastItemCurrentBucket === firstItemNextBucket) {\n            // if yes:\n            // push items from bucket with less to bucket with more.\n            let normalisedBucket: number[] = [];\n\n            // For every entry in the bucket, check if it is not equal to the last item in the current bucket.\n            // If it's not equal, push it into the normalized bucket.\n            // Otherwise, add it to the start of the next bucket.\n            for (let entry of bucket) {\n                if (entry != lastItemCurrentBucket) {\n                    normalisedBucket.push(entry);\n                } else {\n                    nextBucket.unshift(entry);\n                }\n            }\n\n            if (normalisedBucket.length >= MIN_K) {\n                normalisedBuckets.push(normalisedBucket);\n            } else {\n                nextBucket.unshift(...normalisedBucket);\n            }\n        } else {\n            // if no:\n            // push bucket as is and move onto next set of buckets.\n            normalisedBuckets.push(bucket);\n        }\n    }\n\n    if (buckets.length >= 1) {\n        normalisedBuckets.push(buckets[buckets.length - 1]);\n    }\n\n    return normalisedBuckets;\n}\n\n\n/**\n * Anonymise takes the buckets from the bucketise function and creates a new array with the first and last item of the bucket.\n *\n * @param buckets a list of sorted buckets, each of size k.\n * @returns a new bucket only containing the first and last item in each bucket.\n */\n\nexport function anonymise(buckets: number[][] | undefined) {\n    // if the buckets are undefined, undefined is returned\n    if (buckets === undefined) return undefined;\n\n    const anonymised = buckets\n        // the buckets are filtered to only include buckets where the length is greater than 0\n        .filter((bucket) => bucket.length > 0)\n        // the bucket is then mapped to include only the first item and then last item in the bucket\n        .map((bucket) => ({\n            minScore: bucket[0] ,\n            maxScore: bucket[bucket.length - 1],\n            proportion: ((bucket.length)/(buckets.flat(1).length))\n        }));\n\n    // if the length of anonymised is greater than 0 return the value of anonymised else return undefined\n    return anonymised.length > 0 ? anonymised : undefined;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f9ac363ff3848410b17f2538e3ee23e8a86cca9b","contentHash":"d1f7892c0e6ace9be73abf00be43c7e9b773a544d142d3276972fee638f98a76"}}